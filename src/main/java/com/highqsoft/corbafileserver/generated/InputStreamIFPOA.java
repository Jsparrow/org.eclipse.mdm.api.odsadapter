package com.highqsoft.corbafileserver.generated;


/**
* com/highqsoft/corbafileserver/generated/InputStreamIFPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from src/main/idl/corbafileserver.idl
* Donnerstag, 16. Juni 2016 10:30 Uhr MESZ
*/

public abstract class InputStreamIFPOA extends org.omg.PortableServer.Servant
 implements com.highqsoft.corbafileserver.generated.InputStreamIFOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("read", new java.lang.Integer (0));
    _methods.put ("close", new java.lang.Integer (1));
    _methods.put ("length", new java.lang.Integer (2));
    _methods.put ("reset", new java.lang.Integer (3));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
        * Reads up to len bytes of data from the input stream into an array
        * of bytes. An attempt is made to read as many as len bytes, but a
        * smaller number may be read, possibly zero. The number of bytes
        * actually read is returned as an integer.
        *
        * This method blocks until input data is available, end of file
        * is detected, or an exception is thrown.
        *
        * If b is null, a NullPointerException is thrown.
        *
        * If off is negative, or len is negative, or off+len is greater
        * than the length of the array b, then an IndexOutOfBoundsException is thrown.
        *
        * If len is zero, then no bytes are read and 0 is returned;
        * otherwise, there is an attempt to read at least one byte.
        * If no byte is available because the stream is at end of file,
        * the value -1 is returned; otherwise, at least one byte is read and stored into b.
        *
        * The first byte read is stored into element b[off], the next one into b[off+1],
        * and so on. The number of bytes read is, at most, equal to len. Let k be the number
        * of bytes actually read; these bytes will be stored in elements b[off] through b[off+k-1],
        * leaving elements b[off+k] through b[off+len-1] unaffected.
        *
        * In every case, elements b[0] through b[off] and elements b[off+len]
        * through b[b.length-1] are unaffected.
        *
        * If the first byte cannot be read for any reason other than end of file,
        * then an IOException is thrown. In particular, an IOException is thrown
        * if the input stream has been closed.
        *
        * The read(b, off, len) method for class InputStream simply calls the method
        * read() repeatedly. If the first such call results in an IOException,
        * that exception is returned from the call to the read(b, off, len) method.
        * If any subsequent call to read() results in a IOException, the exception
        * is caught and treated as if it were end of file; the bytes read up to that
        * point are stored into b and the number of bytes read before the exception
        * occurred is returned. Subclasses are encouraged to provide a more efficient
        * implementation of this method.
        *
        * @param b - the buffer into which the data is read.
        * @param off - the start offset in array b  at which the data is written.
        * @param len - the maximum number of bytes to read.
        * @return the total number of bytes read into the buffer,
        *         or -1 is there is no more data because the end
        *         of the stream has been reached.
        * @throws CORBAFileServerException if an IO exception occurs.
        */
       case 0:  // com/highqsoft/corbafileserver/generated/InputStreamIF/read
       {
         try {
           com.highqsoft.corbafileserver.generated.DS_BYTEHolder b = new com.highqsoft.corbafileserver.generated.DS_BYTEHolder ();
           int off = in.read_long ();
           int len = in.read_long ();
           int $result = (int)0;
           $result = this.read (b, off, len);
           out = $rh.createReply();
           out.write_long ($result);
           com.highqsoft.corbafileserver.generated.DS_BYTEHelper.write (out, b.value);
         } catch (com.highqsoft.corbafileserver.generated.CORBAFileServerException $ex) {
           out = $rh.createExceptionReply ();
           com.highqsoft.corbafileserver.generated.CORBAFileServerExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
        * Close the input stream.
        *
        * @throws CORBAFileServerException if an IO exception occurs.
        */
       case 1:  // com/highqsoft/corbafileserver/generated/InputStreamIF/close
       {
         try {
           this.close ();
           out = $rh.createReply();
         } catch (com.highqsoft.corbafileserver.generated.CORBAFileServerException $ex) {
           out = $rh.createExceptionReply ();
           com.highqsoft.corbafileserver.generated.CORBAFileServerExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
        * Get the length of the input stream.
        *
        * @return the length of the file to be transferd.
        * @throws CORBAFileServerException if an IO exception occurs.
        */
       case 2:  // com/highqsoft/corbafileserver/generated/InputStreamIF/length
       {
         try {
           int $result = (int)0;
           $result = this.length ();
           out = $rh.createReply();
           out.write_long ($result);
         } catch (com.highqsoft.corbafileserver.generated.CORBAFileServerException $ex) {
           out = $rh.createExceptionReply ();
           com.highqsoft.corbafileserver.generated.CORBAFileServerExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
        * Reset the stream
        *
        * @throws CORBAFileServerException if an IO exception occurs.
        */
       case 3:  // com/highqsoft/corbafileserver/generated/InputStreamIF/reset
       {
         try {
           this.reset ();
           out = $rh.createReply();
         } catch (com.highqsoft.corbafileserver.generated.CORBAFileServerException $ex) {
           out = $rh.createExceptionReply ();
           com.highqsoft.corbafileserver.generated.CORBAFileServerExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:com/highqsoft/corbafileserver/generated/InputStreamIF:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public InputStreamIF _this() 
  {
    return InputStreamIFHelper.narrow(
    super._this_object());
  }

  public InputStreamIF _this(org.omg.CORBA.ORB orb) 
  {
    return InputStreamIFHelper.narrow(
    super._this_object(orb));
  }


} // class InputStreamIFPOA
